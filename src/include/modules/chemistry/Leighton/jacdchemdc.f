C------------------------------------------------------------------------
C     Copyright (C) 2001-2008, ENPC - INRIA - EDF R&D
C
C     This file is part of the air quality modeling system Polyphemus.
C
C     Polyphemus is developed in the INRIA - ENPC joint project-team
C     CLIME and in the ENPC - EDF R&D joint laboratory CEREA.
C
C     Polyphemus is free software; you can redistribute i and/or modify
C     it under the terms of the GNU General Public License as published
C     by the Free Software Foundation; either version 2 of the License,
C     or (at your option) any later version.
C
C     Polyphemus is distributed in the hope that it will be useful, but
C     WITHOUT ANY WARRANTY; without even the implied warranty of
C     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C     General Public License for more details.
C
C     For more information, visit the Polyphemus web site:
C     http://cerea.enpc.fr/polyphemus/
C------------------------------------------------------------------------
 
      subroutine jacdchemdc_leighton  (ns,nr,y,convers_factor,
     $                    convers_factor_jac,rk,JacC)
 
C------------------------------------------------------------------------
C
C     -- DESCRIPTION
C
C     This routine computes the Jacobian matrix for the gas-phase.
C     This routine is automatically generated by SPACK.
C     Mechanism: Leighton            
C     Species: _ciCB05             
C
C------------------------------------------------------------------------
C
C     -- INPUT VARIABLES
C
C     Ns: chemical species number.
C     NR: reaction number.
C     Y: chemical concentrations.
C     RK: kinetic rates.
C     convers_factor: unity conversion factor of mug/m3 to molecules/cm3.
C     convers_factor_jac: Wmol(i)/Wmol(j) for JacC(i,j)
C
C     -- INPUT/OUTPUT VARIABLES
C
C     -- OUTPUT VARIABLES
C
C     JACC: Jacobian matrix.
C
C------------------------------------------------------------------------
C
C     -- REMARKS
C
C     The matrix JACC could be stored in a low-dimensional vector.
C
C------------------------------------------------------------------------
C
C     -- MODIFICATIONS
C
C------------------------------------------------------------------------
C
C     -- AUTHOR(S)
C
C     SPACK.
C
C------------------------------------------------------------------------
 
      implicit none
 
      integer i,j,nr,ns
      double precision dw(nr,ns),rk(nr),y(ns),JacC(ns,ns)
      double precision convers_factor(ns)
      double precision convers_factor_jac(ns,ns)
      double precision conc(ns)
 
      do j=1,ns
       do i=1,ns
        JacC(i,j)=0.d0
       enddo
      enddo
 
C     Conversion mug/m3 to molecules/cm3.
 
      do i = 1, ns
         conc(i) = y(i) * convers_factor(i)
      enddo
 
      call dratedc_leighton  (ns,nr,rk,conc,dw)
 
      JacC( 43, 52) = JacC( 43, 52) + dw(  1, 52)
      JacC( 48, 52) = JacC( 48, 52) + dw(  1, 52)
      JacC( 52, 52) = JacC( 52, 52) - dw(  1, 52)
      JacC( 43, 43) = JacC( 43, 43) - dw(  2, 43)
      JacC( 47, 43) = JacC( 47, 43) + dw(  2, 43)
      JacC( 47, 47) = JacC( 47, 47) - dw(  3, 47)
      JacC( 47, 48) = JacC( 47, 48) - dw(  3, 48)
      JacC( 48, 47) = JacC( 48, 47) - dw(  3, 47)
      JacC( 48, 48) = JacC( 48, 48) - dw(  3, 48)
      JacC( 52, 47) = JacC( 52, 47) + dw(  3, 47)
      JacC( 52, 48) = JacC( 52, 48) + dw(  3, 48)
 
      do j = 1, ns
         do i = 1, ns
            JacC(i,j) = JacC(i,j) * convers_factor_jac(i,j)
         enddo
      enddo
 
 
      RETURN
      END
 

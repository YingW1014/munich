C------------------------------------------------------------------------
C     Copyright (C) 2001-2008, ENPC - INRIA - EDF R&D
C
C     This file is part of the air quality modeling system Polyphemus.
C
C     Polyphemus is developed in the INRIA - ENPC joint project-team
C     CLIME and in the ENPC - EDF R&D joint laboratory CEREA.
C
C     Polyphemus is free software; you can redistribute i and/or modify
C     it under the terms of the GNU General Public License as published
C     by the Free Software Foundation; either version 2 of the License,
C     or (at your option) any later version.
C
C     Polyphemus is distributed in the hope that it will be useful, but
C     WITHOUT ANY WARRANTY; without even the implied warranty of
C     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C     General Public License for more details.
C
C     For more information, visit the Polyphemus web site:
C     http://cerea.enpc.fr/polyphemus/
C------------------------------------------------------------------------
 
      subroutine kinetic_leighton  (nr,rk,temp,xlw,Press,azi,att,
     $     option_photolysis)
 
C------------------------------------------------------------------------
C
C     -- DESCRIPTION
C
C     This routine computes the kinetic rates for the gas-phase.
C     This routine is automatically generated by SPACK.
C     Mechanism: Leighton            
C     Species: _ciCB05             
C
C------------------------------------------------------------------------
C
C     -- INPUT VARIABLES
C
C     NR: reaction number.
C     TEMP: temperature ([K]).
C     XLW: water massic fraction.
C     PRESS: pressure ([Pa]).
C     AZI: zenithal angle ([degree]).
C     ATT: attenuation variable.
C
C     -- INPUT/OUTPUT VARIABLES
C
C     -- OUTPUT VARIABLES
C
C     RK: kinetic rates.
C
C------------------------------------------------------------------------
C
C     -- REMARKS
C
C------------------------------------------------------------------------
C
C     -- MODIFICATIONS
C
C------------------------------------------------------------------------
C
C     -- AUTHOR(S)
C
C     SPACK.
C
C------------------------------------------------------------------------
 
      implicit none
 
      integer nr
      double precision rk(nr),temp,xlw,Press
      double precision Effko,Rapk,facteur,SumM,azi,att
      double precision YlH2O
      integer option_photolysis
 
C     Compute third body.
C     Conversion = Avogadro*1d-6/Perfect gas constant.
C     PRESS in Pascal, SUMM in molecules/cm3, TEMP in Kelvin
 
      SumM = Press * 7.243D16 / temp
 
C     Number of water molecules computed from the massic fraction
C     (absolute humidity)
 
      YlH2O = 29.d0*SumM*xlw/(18.d0+11.d0*xlw)
 
C     For the zenithal angle at tropics
 
      azi=abs(azi)
 
C
      if(option_photolysis.eq.2) then
       rk(  1)= 0.D0
      elseif(option_photolysis.eq.1) then
      if(azi.lt.0.D0)then
       STOP
      elseif(azi.ge. 0.00D+00 .and. azi.lt. 0.10D+02) then
       rk(  1)=-0.1302720567168795D-07
       rk(  1)=-0.7822279432831311D-06+(azi- 0.00D+00) * rk(  1)
       rk(  1)= 0.0000000000000000D+00+(azi- 0.00D+00) * rk(  1)
       rk(  1)= 0.9310260000000001D-02+(azi- 0.00D+00) * rk(  1)
      elseif(azi.ge. 0.10D+02 .and. azi.lt. 0.20D+02) then
       rk(  1)= 0.3771617015067078D-08
       rk(  1)=-0.1173044113433769D-05+(azi- 0.10D+02) * rk(  1)
       rk(  1)=-0.1955272056716901D-04+(azi- 0.10D+02) * rk(  1)
       rk(  1)= 0.9219010000000000D-02+(azi- 0.10D+02) * rk(  1)
      elseif(azi.ge. 0.20D+02 .and. azi.lt. 0.30D+02) then
       rk(  1)=-0.5859262388581815D-08
       rk(  1)=-0.1059895602981758D-05+(azi- 0.20D+02) * rk(  1)
       rk(  1)=-0.4188211773132428D-04+(azi- 0.20D+02) * rk(  1)
       rk(  1)= 0.8909950000000000D-02+(azi- 0.20D+02) * rk(  1)
      elseif(azi.ge. 0.30D+02 .and. azi.lt. 0.40D+02) then
       rk(  1)=-0.7024567460738029D-08
       rk(  1)=-0.1235673474639213D-05+(azi- 0.30D+02) * rk(  1)
       rk(  1)=-0.6483780850753392D-04+(azi- 0.30D+02) * rk(  1)
       rk(  1)= 0.8379279999999999D-02+(azi- 0.30D+02) * rk(  1)
      elseif(azi.ge. 0.40D+02 .and. azi.lt. 0.50D+02) then
       rk(  1)=-0.9202467768466835D-08
       rk(  1)=-0.1446410498461367D-05+(azi- 0.40D+02) * rk(  1)
       rk(  1)=-0.9165864823853972D-04+(azi- 0.40D+02) * rk(  1)
       rk(  1)= 0.7600310000000000D-02+(azi- 0.40D+02) * rk(  1)
      elseif(azi.ge. 0.50D+02 .and. azi.lt. 0.60D+02) then
       rk(  1)=-0.1612556146540100D-07
       rk(  1)=-0.1722484531515342D-05+(azi- 0.50D+02) * rk(  1)
       rk(  1)=-0.1233475985383066D-03+(azi- 0.50D+02) * rk(  1)
       rk(  1)= 0.6529880000000000D-02+(azi- 0.50D+02) * rk(  1)
      elseif(azi.ge. 0.60D+02 .and. azi.lt. 0.70D+02) then
       rk(  1)= 0.3226471363007382D-07
       rk(  1)=-0.2206251375477548D-05+(azi- 0.60D+02) * rk(  1)
       rk(  1)=-0.1626349576082332D-03+(azi- 0.60D+02) * rk(  1)
       rk(  1)= 0.5108030000000000D-02+(azi- 0.60D+02) * rk(  1)
      elseif(azi.ge. 0.70D+02 .and. azi.lt. 0.78D+02) then
       rk(  1)= 0.2027078243961372D-06
       rk(  1)=-0.1238309966574737D-05+(azi- 0.70D+02) * rk(  1)
       rk(  1)=-0.1970805710287543D-03+(azi- 0.70D+02) * rk(  1)
       rk(  1)= 0.3293320000000000D-02+(azi- 0.70D+02) * rk(  1)
      elseif(azi.ge. 0.78D+02 .and. azi.lt. 0.86D+02) then
       rk(  1)=-0.7448311471194499D-07
       rk(  1)= 0.3626677818932555D-05+(azi- 0.78D+02) * rk(  1)
       rk(  1)=-0.1779736282099126D-03+(azi- 0.78D+02) * rk(  1)
       rk(  1)= 0.1741210000000000D-02+(azi- 0.78D+02) * rk(  1)
      elseif(azi.ge. 0.86D+02 .and. azi.lt. 0.90D+02) then
       rk(  1)= 0.2490309929270573D-05
       rk(  1)= 0.1839083065842406D-05+(azi- 0.86D+02) * rk(  1)
       rk(  1)=-0.1342475411316713D-03+(azi- 0.86D+02) * rk(  1)
       rk(  1)= 0.5113930000000000D-03+(azi- 0.86D+02) * rk(  1)
      elseif(azi.ge.90.D0)then
       rk(  1)= 0.1632080000000000D-03
      endif
      if(att.lt.0.99999) rk(  1) = rk(  1) * att
      endif
C
      rk(  2) = SumM * 6.0d-34 * (temp/3.d2) ** (-2.4d0)
      rk(  2) = rk(  2) * SumM * 0.2d0
      rk(  3) =  DEXP(-0.2653240882726044D+02
     & - (  0.1500000000000000D+04 )/temp)
 
      RETURN
      END
 

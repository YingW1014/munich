# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_talos', [dirname(__file__)])
        except ImportError:
            import _talos
            return _talos
        if fp is not None:
            try:
                _mod = imp.load_module('_talos', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _talos = swig_import_helper()
    del swig_import_helper
else:
    import _talos
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _talos.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _talos.SwigPyIterator_value(self)
    def incr(self, n=1): return _talos.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _talos.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _talos.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _talos.SwigPyIterator_equal(self, *args)
    def copy(self): return _talos.SwigPyIterator_copy(self)
    def next(self): return _talos.SwigPyIterator_next(self)
    def __next__(self): return _talos.SwigPyIterator___next__(self)
    def previous(self): return _talos.SwigPyIterator_previous(self)
    def advance(self, *args): return _talos.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _talos.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _talos.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _talos.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _talos.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _talos.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _talos.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _talos.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class VectorString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorString, name)
    __repr__ = _swig_repr
    def iterator(self): return _talos.VectorString_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _talos.VectorString___nonzero__(self)
    def __bool__(self): return _talos.VectorString___bool__(self)
    def __len__(self): return _talos.VectorString___len__(self)
    def pop(self): return _talos.VectorString_pop(self)
    def __getslice__(self, *args): return _talos.VectorString___getslice__(self, *args)
    def __setslice__(self, *args): return _talos.VectorString___setslice__(self, *args)
    def __delslice__(self, *args): return _talos.VectorString___delslice__(self, *args)
    def __delitem__(self, *args): return _talos.VectorString___delitem__(self, *args)
    def __getitem__(self, *args): return _talos.VectorString___getitem__(self, *args)
    def __setitem__(self, *args): return _talos.VectorString___setitem__(self, *args)
    def append(self, *args): return _talos.VectorString_append(self, *args)
    def empty(self): return _talos.VectorString_empty(self)
    def size(self): return _talos.VectorString_size(self)
    def clear(self): return _talos.VectorString_clear(self)
    def swap(self, *args): return _talos.VectorString_swap(self, *args)
    def get_allocator(self): return _talos.VectorString_get_allocator(self)
    def begin(self): return _talos.VectorString_begin(self)
    def end(self): return _talos.VectorString_end(self)
    def rbegin(self): return _talos.VectorString_rbegin(self)
    def rend(self): return _talos.VectorString_rend(self)
    def pop_back(self): return _talos.VectorString_pop_back(self)
    def erase(self, *args): return _talos.VectorString_erase(self, *args)
    def __init__(self, *args): 
        this = _talos.new_VectorString(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _talos.VectorString_push_back(self, *args)
    def front(self): return _talos.VectorString_front(self)
    def back(self): return _talos.VectorString_back(self)
    def assign(self, *args): return _talos.VectorString_assign(self, *args)
    def resize(self, *args): return _talos.VectorString_resize(self, *args)
    def insert(self, *args): return _talos.VectorString_insert(self, *args)
    def reserve(self, *args): return _talos.VectorString_reserve(self, *args)
    def capacity(self): return _talos.VectorString_capacity(self)
    __swig_destroy__ = _talos.delete_VectorString
    __del__ = lambda self : None;
VectorString_swigregister = _talos.VectorString_swigregister
VectorString_swigregister(VectorString)

class VectorInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorInt, name)
    __repr__ = _swig_repr
    def iterator(self): return _talos.VectorInt_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _talos.VectorInt___nonzero__(self)
    def __bool__(self): return _talos.VectorInt___bool__(self)
    def __len__(self): return _talos.VectorInt___len__(self)
    def pop(self): return _talos.VectorInt_pop(self)
    def __getslice__(self, *args): return _talos.VectorInt___getslice__(self, *args)
    def __setslice__(self, *args): return _talos.VectorInt___setslice__(self, *args)
    def __delslice__(self, *args): return _talos.VectorInt___delslice__(self, *args)
    def __delitem__(self, *args): return _talos.VectorInt___delitem__(self, *args)
    def __getitem__(self, *args): return _talos.VectorInt___getitem__(self, *args)
    def __setitem__(self, *args): return _talos.VectorInt___setitem__(self, *args)
    def append(self, *args): return _talos.VectorInt_append(self, *args)
    def empty(self): return _talos.VectorInt_empty(self)
    def size(self): return _talos.VectorInt_size(self)
    def clear(self): return _talos.VectorInt_clear(self)
    def swap(self, *args): return _talos.VectorInt_swap(self, *args)
    def get_allocator(self): return _talos.VectorInt_get_allocator(self)
    def begin(self): return _talos.VectorInt_begin(self)
    def end(self): return _talos.VectorInt_end(self)
    def rbegin(self): return _talos.VectorInt_rbegin(self)
    def rend(self): return _talos.VectorInt_rend(self)
    def pop_back(self): return _talos.VectorInt_pop_back(self)
    def erase(self, *args): return _talos.VectorInt_erase(self, *args)
    def __init__(self, *args): 
        this = _talos.new_VectorInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _talos.VectorInt_push_back(self, *args)
    def front(self): return _talos.VectorInt_front(self)
    def back(self): return _talos.VectorInt_back(self)
    def assign(self, *args): return _talos.VectorInt_assign(self, *args)
    def resize(self, *args): return _talos.VectorInt_resize(self, *args)
    def insert(self, *args): return _talos.VectorInt_insert(self, *args)
    def reserve(self, *args): return _talos.VectorInt_reserve(self, *args)
    def capacity(self): return _talos.VectorInt_capacity(self)
    __swig_destroy__ = _talos.delete_VectorInt
    __del__ = lambda self : None;
VectorInt_swigregister = _talos.VectorInt_swigregister
VectorInt_swigregister(VectorInt)

class VectorDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorDouble, name)
    __repr__ = _swig_repr
    def iterator(self): return _talos.VectorDouble_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _talos.VectorDouble___nonzero__(self)
    def __bool__(self): return _talos.VectorDouble___bool__(self)
    def __len__(self): return _talos.VectorDouble___len__(self)
    def pop(self): return _talos.VectorDouble_pop(self)
    def __getslice__(self, *args): return _talos.VectorDouble___getslice__(self, *args)
    def __setslice__(self, *args): return _talos.VectorDouble___setslice__(self, *args)
    def __delslice__(self, *args): return _talos.VectorDouble___delslice__(self, *args)
    def __delitem__(self, *args): return _talos.VectorDouble___delitem__(self, *args)
    def __getitem__(self, *args): return _talos.VectorDouble___getitem__(self, *args)
    def __setitem__(self, *args): return _talos.VectorDouble___setitem__(self, *args)
    def append(self, *args): return _talos.VectorDouble_append(self, *args)
    def empty(self): return _talos.VectorDouble_empty(self)
    def size(self): return _talos.VectorDouble_size(self)
    def clear(self): return _talos.VectorDouble_clear(self)
    def swap(self, *args): return _talos.VectorDouble_swap(self, *args)
    def get_allocator(self): return _talos.VectorDouble_get_allocator(self)
    def begin(self): return _talos.VectorDouble_begin(self)
    def end(self): return _talos.VectorDouble_end(self)
    def rbegin(self): return _talos.VectorDouble_rbegin(self)
    def rend(self): return _talos.VectorDouble_rend(self)
    def pop_back(self): return _talos.VectorDouble_pop_back(self)
    def erase(self, *args): return _talos.VectorDouble_erase(self, *args)
    def __init__(self, *args): 
        this = _talos.new_VectorDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _talos.VectorDouble_push_back(self, *args)
    def front(self): return _talos.VectorDouble_front(self)
    def back(self): return _talos.VectorDouble_back(self)
    def assign(self, *args): return _talos.VectorDouble_assign(self, *args)
    def resize(self, *args): return _talos.VectorDouble_resize(self, *args)
    def insert(self, *args): return _talos.VectorDouble_insert(self, *args)
    def reserve(self, *args): return _talos.VectorDouble_reserve(self, *args)
    def capacity(self): return _talos.VectorDouble_capacity(self)
    __swig_destroy__ = _talos.delete_VectorDouble
    __del__ = lambda self : None;
VectorDouble_swigregister = _talos.VectorDouble_swigregister
VectorDouble_swigregister(VectorDouble)

class Str(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Str, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Str, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _talos.new_Str(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _talos.delete_Str
    __del__ = lambda self : None;
Str_swigregister = _talos.Str_swigregister
Str_swigregister(Str)


def convert(*args):
  return _talos.convert(*args)
convert = _talos.convert

def lower_case(*args):
  return _talos.lower_case(*args)
lower_case = _talos.lower_case

def upper_case(*args):
  return _talos.upper_case(*args)
upper_case = _talos.upper_case

def is_num(*args):
  return _talos.is_num(*args)
is_num = _talos.is_num

def is_integer(*args):
  return _talos.is_integer(*args)
is_integer = _talos.is_integer

def is_unsigned_integer(*args):
  return _talos.is_unsigned_integer(*args)
is_unsigned_integer = _talos.is_unsigned_integer

def is_date(*args):
  return _talos.is_date(*args)
is_date = _talos.is_date

def is_delta(*args):
  return _talos.is_delta(*args)
is_delta = _talos.is_delta

def find_replace(*args):
  return _talos.find_replace(*args)
find_replace = _talos.find_replace

def trim(*args):
  return _talos.trim(*args)
trim = _talos.trim

def trim_beg(*args):
  return _talos.trim_beg(*args)
trim_beg = _talos.trim_beg

def trim_end(*args):
  return _talos.trim_end(*args)
trim_end = _talos.trim_end

def split(*args):
  return _talos.split(*args)
split = _talos.split
class Date(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Date, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Date, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _talos.new_Date(*args)
        try: self.this.append(this)
        except: self.this = this
    def SetDate(self, *args): return _talos.Date_SetDate(self, *args)
    def LeapYear(self, *args): return _talos.Date_LeapYear(self, *args)
    def GetDate(self, *args): return _talos.Date_GetDate(self, *args)
    def GetYear(self): return _talos.Date_GetYear(self)
    def GetMonth(self): return _talos.Date_GetMonth(self)
    def GetDay(self): return _talos.Date_GetDay(self)
    def GetHour(self): return _talos.Date_GetHour(self)
    def GetMinutes(self): return _talos.Date_GetMinutes(self)
    def GetSeconds(self): return _talos.Date_GetSeconds(self)
    def AddYears(self, *args): return _talos.Date_AddYears(self, *args)
    def AddMonths(self, *args): return _talos.Date_AddMonths(self, *args)
    def AddDays(self, *args): return _talos.Date_AddDays(self, *args)
    def AddHours(self, *args): return _talos.Date_AddHours(self, *args)
    def AddMinutes(self, *args): return _talos.Date_AddMinutes(self, *args)
    def AddSeconds(self, *args): return _talos.Date_AddSeconds(self, *args)
    def SetYear(self, *args): return _talos.Date_SetYear(self, *args)
    def SetMonth(self, *args): return _talos.Date_SetMonth(self, *args)
    def SetDay(self, *args): return _talos.Date_SetDay(self, *args)
    def SetHour(self, *args): return _talos.Date_SetHour(self, *args)
    def SetMinutes(self, *args): return _talos.Date_SetMinutes(self, *args)
    def SetSeconds(self, *args): return _talos.Date_SetSeconds(self, *args)
    def GetOrdinalDay(self): return _talos.Date_GetOrdinalDay(self)
    def GetDayNumber(self): return _talos.Date_GetDayNumber(self)
    def GetNumberOfDays(self): return _talos.Date_GetNumberOfDays(self)
    def GetDaysFrom(self, *args): return _talos.Date_GetDaysFrom(self, *args)
    def GetSecondsFrom(self, *args): return _talos.Date_GetSecondsFrom(self, *args)
    def GetNumberOfHours(self): return _talos.Date_GetNumberOfHours(self)
    def GetNumberOfMinutes(self): return _talos.Date_GetNumberOfMinutes(self)
    def GetNumberOfSeconds(self): return _talos.Date_GetNumberOfSeconds(self)
    def GetWeekDay(self): return _talos.Date_GetWeekDay(self)
    __swig_destroy__ = _talos.delete_Date
    __del__ = lambda self : None;
Date_swigregister = _talos.Date_swigregister
Date_swigregister(Date)


def __lt__(*args):
  return _talos.__lt__(*args)
__lt__ = _talos.__lt__

def __le__(*args):
  return _talos.__le__(*args)
__le__ = _talos.__le__

def __gt__(*args):
  return _talos.__gt__(*args)
__gt__ = _talos.__gt__

def __ge__(*args):
  return _talos.__ge__(*args)
__ge__ = _talos.__ge__

def __eq__(*args):
  return _talos.__eq__(*args)
__eq__ = _talos.__eq__

def __ne__(*args):
  return _talos.__ne__(*args)
__ne__ = _talos.__ne__

def exists(*args):
  return _talos.exists(*args)
exists = _talos.exists

def file_size(*args):
  return _talos.file_size(*args)
file_size = _talos.file_size

def show_constraint(*args):
  return _talos.show_constraint(*args)
show_constraint = _talos.show_constraint
class ExtStream(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExtStream, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExtStream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _talos.new_ExtStream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _talos.delete_ExtStream
    __del__ = lambda self : None;
    def Discard(self, *args): return _talos.ExtStream_Discard(self, *args)
    def SkipDiscarded(self): return _talos.ExtStream_SkipDiscarded(self)
    def SetDelimiters(self, *args): return _talos.ExtStream_SetDelimiters(self, *args)
    def SetComments(self, *args): return _talos.ExtStream_SetComments(self, *args)
    def GetDelimiters(self): return _talos.ExtStream_GetDelimiters(self)
    def GetComments(self): return _talos.ExtStream_GetComments(self)
    def GetFileName(self): return _talos.ExtStream_GetFileName(self)
    def SkipDelimiters(self): return _talos.ExtStream_SkipDelimiters(self)
    def RemoveDelimiters(self, *args): return _talos.ExtStream_RemoveDelimiters(self, *args)
    def Skip(self): return _talos.ExtStream_Skip(self)
    def Close(self): return _talos.ExtStream_Close(self)
    def IsEmpty(self): return _talos.ExtStream_IsEmpty(self)
    def Rewind(self): return _talos.ExtStream_Rewind(self)
    def GetFullLine(self, *args): return _talos.ExtStream_GetFullLine(self, *args)
    def PeekFullLine(self, *args): return _talos.ExtStream_PeekFullLine(self, *args)
    def SkipFullLines(self, *args): return _talos.ExtStream_SkipFullLines(self, *args)
    def GetLine(self, *args): return _talos.ExtStream_GetLine(self, *args)
    def PeekLine(self, *args): return _talos.ExtStream_PeekLine(self, *args)
    def SkipLines(self, *args): return _talos.ExtStream_SkipLines(self, *args)
    def Find(self, *args): return _talos.ExtStream_Find(self, *args)
    def FindFromBeginning(self, *args): return _talos.ExtStream_FindFromBeginning(self, *args)
    def GetElement(self): return _talos.ExtStream_GetElement(self)
    def PeekElement(self): return _talos.ExtStream_PeekElement(self)
    def SkipElements(self, *args): return _talos.ExtStream_SkipElements(self, *args)
    def GetNumber(self): return _talos.ExtStream_GetNumber(self)
    def PeekNumber(self): return _talos.ExtStream_PeekNumber(self)
    def SkipNumbers(self, *args): return _talos.ExtStream_SkipNumbers(self, *args)
    def GetValue(self, *args): return _talos.ExtStream_GetValue(self, *args)
    def PeekValue(self, *args): return _talos.ExtStream_PeekValue(self, *args)
ExtStream_swigregister = _talos.ExtStream_swigregister
ExtStream_swigregister(ExtStream)

class ConfigStream(ExtStream):
    __swig_setmethods__ = {}
    for _s in [ExtStream]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConfigStream, name, value)
    __swig_getmethods__ = {}
    for _s in [ExtStream]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConfigStream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _talos.new_ConfigStream(*args)
        try: self.this.append(this)
        except: self.this = this
    def NoSection(self): return _talos.ConfigStream_NoSection(self)
    def SetSection(self, *args): return _talos.ConfigStream_SetSection(self, *args)
    def GetSection(self): return _talos.ConfigStream_GetSection(self)
    def SetMarkupTags(self, *args): return _talos.ConfigStream_SetMarkupTags(self, *args)
    def GetMarkupTags(self): return _talos.ConfigStream_GetMarkupTags(self)
    def IsEmpty(self): return _talos.ConfigStream_IsEmpty(self)
    def Check(self, *args): return _talos.ConfigStream_Check(self, *args)
    def Find(self, *args): return _talos.ConfigStream_Find(self, *args)
    def FindFromBeginning(self, *args): return _talos.ConfigStream_FindFromBeginning(self, *args)
    def GetElement(self, *args): return _talos.ConfigStream_GetElement(self, *args)
    def GetLine(self, *args): return _talos.ConfigStream_GetLine(self, *args)
    __swig_destroy__ = _talos.delete_ConfigStream
    __del__ = lambda self : None;
ConfigStream_swigregister = _talos.ConfigStream_swigregister
ConfigStream_swigregister(ConfigStream)

class ConfigStreams(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConfigStreams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConfigStreams, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _talos.new_ConfigStreams(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _talos.delete_ConfigStreams
    __del__ = lambda self : None;
    def GetStreams(self): return _talos.ConfigStreams_GetStreams(self)
    def GetCurrent(self): return _talos.ConfigStreams_GetCurrent(self)
    def AddFile(self, *args): return _talos.ConfigStreams_AddFile(self, *args)
    def NoSection(self): return _talos.ConfigStreams_NoSection(self)
    def SetSection(self, *args): return _talos.ConfigStreams_SetSection(self, *args)
    def GetSection(self): return _talos.ConfigStreams_GetSection(self)
    def Discard(self, *args): return _talos.ConfigStreams_Discard(self, *args)
    def SkipDiscarded(self): return _talos.ConfigStreams_SkipDiscarded(self)
    def SkipDelimiters(self): return _talos.ConfigStreams_SkipDelimiters(self)
    def RemoveDelimiters(self, *args): return _talos.ConfigStreams_RemoveDelimiters(self, *args)
    def Skip(self): return _talos.ConfigStreams_Skip(self)
    def IsEmpty(self): return _talos.ConfigStreams_IsEmpty(self)
    def Rewind(self): return _talos.ConfigStreams_Rewind(self)
    def GetFullLine(self, *args): return _talos.ConfigStreams_GetFullLine(self, *args)
    def PeekFullLine(self, *args): return _talos.ConfigStreams_PeekFullLine(self, *args)
    def SkipFullLines(self, *args): return _talos.ConfigStreams_SkipFullLines(self, *args)
    def GetRawLine(self): return _talos.ConfigStreams_GetRawLine(self)
    def GetLine(self, *args): return _talos.ConfigStreams_GetLine(self, *args)
    def PeekLine(self, *args): return _talos.ConfigStreams_PeekLine(self, *args)
    def SkipLines(self, *args): return _talos.ConfigStreams_SkipLines(self, *args)
    def Find(self, *args): return _talos.ConfigStreams_Find(self, *args)
    def FindFromBeginning(self, *args): return _talos.ConfigStreams_FindFromBeginning(self, *args)
    def GetRawElement(self): return _talos.ConfigStreams_GetRawElement(self)
    def GetElement(self): return _talos.ConfigStreams_GetElement(self)
    def PeekElement(self): return _talos.ConfigStreams_PeekElement(self)
    def SkipElements(self, *args): return _talos.ConfigStreams_SkipElements(self, *args)
    def GetNumber(self): return _talos.ConfigStreams_GetNumber(self)
    def PeekNumber(self): return _talos.ConfigStreams_PeekNumber(self)
    def SkipNumbers(self, *args): return _talos.ConfigStreams_SkipNumbers(self, *args)
    def GetValue(self, *args): return _talos.ConfigStreams_GetValue(self, *args)
    def PeekValue(self, *args): return _talos.ConfigStreams_PeekValue(self, *args)
ConfigStreams_swigregister = _talos.ConfigStreams_swigregister
ConfigStreams_swigregister(ConfigStreams)

# This file is compatible with both classic and new-style classes.


